{"version":3,"sources":["redux/reducer.js","redux/constActions.js","redux/store.js","components/Slot.js","components/moviesOrTVShowsContainer.js","redux/actions.js","App.js","serviceWorker.js","index.js"],"names":["initialState","moviesOrTVShows","people","moviesOrTVShowsReducer","state","action","type","produce","draft","payload","console","log","name","store","createStore","applyMiddleware","thunk","Slot","subDescription","expand","changeDescription","setState","props","description","substring","this","className","onClick","title","year","director","producer","Component","moviesOrTVShowsContainer","fetchPeople","fetchMoviesOrTVShows","map","movie","key","id","url","release_date","connect","dispatch","axios","get","then","response","data","printState","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"4QAIMA,EAAe,CACjBC,OAAO,GACPC,OAAO,IA8BIC,EAzBM,WACpB,IADqBC,EACtB,uDAD4BJ,EAAaK,EACzC,uCACI,OAAOA,EAAOC,MAEV,ICfoB,eDgBf,OAASC,YAAQH,GAAO,SAAAI,GACzBA,EAAMP,OAASI,EAAOI,WAK3B,ICrBqB,eDsBf,OAASF,YAAQH,GAAO,SAAAI,GACzBA,EAAMN,OAASG,EAAOI,WAI1B,IC1BkB,cD4Bd,OADAC,QAAQC,IAAI,iBAAiBP,EAAMF,OAAO,GAAGU,MACtCR,EAEX,QACC,OAAOA,IE1BDS,EAFDC,YAAYX,EAAcY,YAAgBC,M,oDCgCzCC,E,2MA7BVb,MAAM,CACFc,eAAe,GACfC,QAAO,G,EAGhBC,kBAAmB,WAEf,EAAKhB,MAAMe,OAAU,EAAKE,SAAS,CAACH,eAAe,EAAKI,MAAMC,YAAYJ,QAAO,IAChF,EAAKE,SAAS,CAACH,eAAgB,EAAKI,MAAMC,YAAaC,UAAU,EAAE,KAAK,MAAOL,QAAO,K,mFAMlFM,KAAKJ,SAAS,CAACH,eAAgBO,KAAKH,MAAMC,YAAaC,UAAU,EAAE,KAAK,U,+BAGnE,IAAD,OACL,OACI,yBAAKE,UAAU,YAAWC,QAAS,kBAAI,EAAKP,sBACxC,qCAAWK,KAAKH,MAAMM,MAAtB,IAA8BH,KAAKH,MAAMO,KAAzC,KACA,2BAAG,wCAAH,IAAqBJ,KAAKH,MAAMQ,SAAhC,UAAgD,wCAAhD,IAAkEL,KAAKH,MAAMS,UAE7E,2BAAG,2CAAoBN,KAAKrB,MAAMc,eAAlC,U,GAxBIc,aCDbC,E,4LAGCR,KAAKH,MAAMY,cACXT,KAAKH,MAAMa,gB,+BAKL,IAAD,OAEL,OACI,yBAAKT,UAAU,kBAEVD,KAAKH,MAAMrB,OAAOmC,KAAK,SAAAC,GAAK,OAAE,kBAAC,EAAD,CAAMC,IAAKD,EAAME,GAAIC,IAAKH,EAAMG,IAAKtC,OAAS,EAAKoB,MAAMpB,OAAQ0B,MAAOS,EAAMT,MAAOE,SAAUO,EAAMP,SAAYC,SAAUM,EAAMN,SAAUR,YAAcc,EAAMd,YAAaM,KAAOQ,EAAMI,uB,GAd1MT,aAsCfU,eAhBO,SAAAtC,GAElB,MAAM,CACFH,OAAOG,EAAMH,OACbC,OAAOE,EAAMF,WAGI,SAAAyC,GAErB,MAAM,CACFR,YAAY,kBAAIQ,GCjCb,SAACA,GAAD,OAAcC,IAAMC,IAAI,yCAC9BC,MAAK,SAAAC,GACDJ,EAAS,CAACrC,KJPS,eIQhBG,QAASsC,EAASC,cD+BtBd,YAAY,kBAAIS,GC1Bb,SAACA,GAAD,OAAcC,IAAMC,IAAI,0CAC9BC,MAAK,SAAAC,GACDJ,EAAS,CAACrC,KJdS,eIehBG,QAASsC,EAASC,cDwBtBC,WAAW,kBAAIN,EClBb,CACFrC,KJrBkB,oBG0CXoC,CAA+CT,GEzB/CiB,MAZf,WACE,OACE,kBAAC,IAAD,CAAUrC,MAAQA,GAElB,yBAAKa,UAAU,OACf,sCACA,kBAAC,EAAD,SCDgByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.041d066a.chunk.js","sourcesContent":["import {FETCH_moviesOrTVShows,FETCH_PEOPLE,PRINT_STATE} from './constActions'\r\nimport produce from 'immer'\r\n\r\n\r\nconst initialState = {\r\n    moviesOrTVShows:[],\r\n    people:[]\r\n}\r\n\r\n\r\n\r\nconst moviesOrTVShowsReducer =(state=initialState,action)=>\r\n{\r\n    switch(action.type)\r\n    {\r\n        case FETCH_moviesOrTVShows:\r\n        {    return   produce(state, draft=>{\r\n            draft.moviesOrTVShows = action.payload\r\n          \r\n        })\r\n       }\r\n       \r\n       case FETCH_PEOPLE:\r\n        {    return   produce(state, draft=>{\r\n            draft.people = action.payload\r\n          \r\n        })\r\n       }\r\n        case PRINT_STATE:\r\n        {   console.log('IZ PRINT STATE'+state.people[0].name)\r\n            return state;\r\n        }\r\n        default: \r\n        {return state}\r\n        }\r\n}\r\nexport default moviesOrTVShowsReducer","export const FETCH_moviesOrTVShows = 'FETCH_moviesOrTVShows'\r\nexport const FETCH_PEOPLE = 'FETCH_PEOPLE'\r\nexport const PRINT_STATE= 'PRINT_STATE'","import {createStore,applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport moviesOrTVShowsReducer from './reducer'\r\n\r\n\r\nconst store = createStore(moviesOrTVShowsReducer,applyMiddleware(thunk))\r\n\r\nexport default store","import React, { Component } from 'react'\r\n\r\n\r\n\r\n\r\n\r\n\r\n class Slot extends Component {\r\n     state={\r\n         subDescription:'',\r\n         expand:true\r\n     }\r\n\r\nchangeDescription =()=>\r\n{\r\n    this.state.expand ? (this.setState({subDescription:this.props.description,expand:false})) : \r\n    (this.setState({subDescription:(this.props.description).substring(0,100)+'...', expand:true}))\r\n\r\n}\r\n     \r\n     componentDidMount()\r\n     {\r\n         this.setState({subDescription:(this.props.description).substring(0,100)+'...'\r\n        })\r\n     }\r\n    render() {\r\n        return (\r\n            <div className='container'onClick={()=>this.changeDescription()}>\r\n                <h2>Title:{this.props.title}({this.props.year})</h2>\r\n                <p><b>Director:</b> {this.props.director}       <b>Producer:</b> {this.props.producer}</p>\r\n\r\n                <p><b>Description:</b>{this.state.subDescription} </p>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Slot","import React, { Component } from 'react'\r\nimport {fetchMoviesOrTVShows,fetchPeople,printState} from '../redux/actions'\r\nimport {connect} from 'react-redux'\r\nimport Slot from './Slot'\r\n\r\n\r\n class moviesOrTVShowsContainer extends Component {\r\n    \r\n    componentDidMount() {\r\n        this.props.fetchPeople();\r\n        this.props.fetchMoviesOrTVShows();\r\n        \r\n        \r\n      }\r\n    \r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"moviesOrTVShowsContainer\">\r\n                \r\n                {this.props.moviesOrTVShows.map( movie=><Slot key={movie.id} url={movie.url} people ={this.props.people} title={movie.title} director={movie.director}   producer={movie.producer} description ={movie.description} year ={movie.release_date} />)}\r\n            \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps=state=>\r\n{\r\n    return{\r\n        moviesOrTVShows:state.moviesOrTVShows,\r\n        people:state.people\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>\r\n{\r\n    return{\r\n        fetchMoviesOrTVShows:()=>dispatch(fetchMoviesOrTVShows()),\r\n        fetchPeople:()=>dispatch(fetchPeople()),\r\n        printState:()=>dispatch(printState())\r\n    }\r\n}\r\n\r\nexport default connect (mapStateToProps,mapDispatchToProps) ( moviesOrTVShowsContainer)\r\n","import {FETCH_moviesOrTVShows,FETCH_PEOPLE,PRINT_STATE} from './constActions'\r\nimport axios from 'axios'\r\n\r\nexport const fetchMoviesOrTVShows = ()=>\r\n{\r\n    return (dispatch) => axios.get(\"https://ghibliapi.herokuapp.com/films\")\r\n    .then(response => {\r\n         dispatch({type: FETCH_moviesOrTVShows, \r\n            payload: response.data});\r\n    })\r\n}\r\nexport const fetchPeople = ()=>\r\n{\r\n    return (dispatch) => axios.get(\"https://ghibliapi.herokuapp.com/people\")\r\n    .then(response => {\r\n         dispatch({type: FETCH_PEOPLE, \r\n            payload: response.data});\r\n    })\r\n}\r\n\r\nexport const printState=()=>\r\n{\r\n    return{\r\n        type:PRINT_STATE\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux'\nimport store from './redux/store'\nimport moviesOrTVShowsContainer from './components/moviesOrTVShowsContainer'\n\n\nfunction App() {\n  return (\n    <Provider store ={store}>\n     \n    <div className=\"App\">\n    <h1>moviesOrTVShows</h1>\n    <moviesOrTVShowsContainer/>\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}